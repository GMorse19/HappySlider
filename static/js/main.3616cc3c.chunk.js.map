{"version":3,"sources":["HappySlider/Smileys/smiley1.png","HappySlider/Smileys/smiley2.png","HappySlider/Smileys/smiley3.png","HappySlider/Smileys/smiley4.png","HappySlider/Smileys/smiley5.png","HappySlider/HappySlider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HappySlider","props","handleChange","event","setState","value","target","number","Math","round","smileys","smiley1","smiley2","smiley3","smiley4","smiley5","document","documentElement","style","setProperty","state","this","rounded","className","type","onChange","min","max","id","step","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,ySCoD5BC,E,kDAzCb,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IAMRC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,MAAOF,EAAMG,OAAOD,QAEtB,IAAME,EAASC,KAAKC,MAAMN,EAAMG,OAAOD,OAEjCK,EAAU,CAAC,GAAIC,IAASC,IAASC,IAASC,IAASC,KAEzDC,SAASC,gBAAgBC,MAAMC,YAAY,qBAA3C,cAAwET,EAAQH,GAAhF,MACAS,SAASC,gBAAgBC,MAAMC,YAAY,qBAAsB,WAdjE,EAAKC,MAAQ,CACXf,MAAO,GAHS,E,qDAmBT,IACDA,EAAUgB,KAAKD,MAAff,MAEFiB,EAAUd,KAAKC,MAAMJ,GAE3B,OACE,yBAAKkB,UAAU,kBACb,2BACEC,KAAK,QACLC,SAAUJ,KAAKnB,aACfwB,IAAK,EACLC,IAAK,EACLtB,MAAOA,EACPkB,UAAS,iBAAYD,GACrBM,GAAG,UACHC,KAAM,W,GAnCUC,aCIXC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCGcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3616cc3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smiley1.cb6d28ed.png\";","module.exports = __webpack_public_path__ + \"static/media/smiley2.b4c1c338.png\";","module.exports = __webpack_public_path__ + \"static/media/smiley3.f3969dab.png\";","module.exports = __webpack_public_path__ + \"static/media/smiley4.e2025ea6.png\";","module.exports = __webpack_public_path__ + \"static/media/smiley5.37ebb46b.png\";","import React, { Component } from 'react'\n\nimport './HappySlider.css'\n\nimport smiley1 from './Smileys/smiley1.png'\nimport smiley2 from './Smileys/smiley2.png'\nimport smiley3 from './Smileys/smiley3.png'\nimport smiley4 from './Smileys/smiley4.png'\nimport smiley5 from './Smileys/smiley5.png'\n\nclass HappySlider extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      value: 3\n    }\n  }\n\n  handleChange = event => {\n    this.setState({\n      value: event.target.value\n    })\n    const number = Math.round(event.target.value)\n\n    const smileys = ['', smiley1, smiley2, smiley3, smiley4, smiley5]\n\n    document.documentElement.style.setProperty('--background-image', `url(${smileys[number]})`)\n    document.documentElement.style.setProperty('--background-color', 'purple')\n  }\n\n  render () {\n    const { value } = this.state\n\n    const rounded = Math.round(value)\n\n    return (\n      <div className=\"slidecontainer\">\n        <input\n          type=\"range\"\n          onChange={this.handleChange}\n          min={1}\n          max={5}\n          value={value}\n          className={`smiley-${rounded}`}\n          id=\"myRange\"\n          step={0.01}\n        />\n      </div>\n    )\n  }\n}\n\nexport default HappySlider\n","import React from 'react';\n\nimport './App.scss';\n\nimport HappySlider from './HappySlider/HappySlider'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HappySlider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}