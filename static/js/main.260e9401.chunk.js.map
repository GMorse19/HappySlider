{"version":3,"sources":["HappySlider/Smileys/smiley1.svg","HappySlider/Smileys/smiley2.svg","HappySlider/Smileys/smiley3.svg","HappySlider/Smileys/smiley4.svg","HappySlider/Smileys/smiley5.svg","HappySlider/smileyArray.js","HappySlider/HappySlider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","smileys","smiley1","smiley2","smiley3","smiley4","smiley5","HappySlider","id","value","min","max","name","onChange","className","step","rounded","Math","round","document","documentElement","style","setProperty","type","App","handleChange","event","setState","target","state","sliderOne","sliderTwo","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,iTCW9BC,EAAU,CAAC,GAAIC,IAASC,IAASC,IAASC,IAASC,KCsBjDC,EA5BY,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,GAAIC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,IAAKC,EAA2C,EAA3CA,IAAKC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAIpEC,EAAUC,KAAKC,MAAMT,GAM3B,OAFAU,SAASC,gBAAgBC,MAAMC,YAA/B,6BAAiEd,GAAjE,cAA8EP,EAAQe,GAAtF,MAGE,yBAAKF,UAAU,kBACb,2BACES,KAAK,QACLf,GAAIA,EACJK,SAAUA,EACVH,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNH,MAAOA,EACPK,UAAWA,EACXC,KAAMA,MCuBDS,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAOFC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAiBD,EAAME,OAAOhB,KAAOc,EAAME,OAAOnB,SAPlD,EAAKoB,MAAQ,CACXC,UAAW,EACXC,UAAW,GAJH,E,qDAaZ,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,CACES,KAAK,QACLV,SAAUmB,KAAKP,aACff,IAAI,IACJC,IAAI,IACJF,MAAOuB,KAAKH,MAAMC,UAClBlB,KAAK,YACLE,UAAU,YACVN,GAAG,YACHO,KAAK,SAEP,kBAAC,EAAD,CACEQ,KAAK,QACLV,SAAUmB,KAAKP,aACff,IAAI,IACJC,IAAI,IACJF,MAAOuB,KAAKH,MAAME,UAClBnB,KAAK,YACLE,UAAU,YACVN,GAAG,YACHO,KAAK,c,GApCGkB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.260e9401.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smiley1.dd3f1771.svg\";","module.exports = __webpack_public_path__ + \"static/media/smiley2.fc40ef20.svg\";","module.exports = __webpack_public_path__ + \"static/media/smiley3.e12a5923.svg\";","module.exports = __webpack_public_path__ + \"static/media/smiley4.f5ff57bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/smiley5.27fddc3e.svg\";","// Relative path does not work for css Variable\n// import images into a variable\nimport smiley1 from './Smileys/smiley1.svg'\nimport smiley2 from './Smileys/smiley2.svg'\nimport smiley3 from './Smileys/smiley3.svg'\nimport smiley4 from './Smileys/smiley4.svg'\nimport smiley5 from './Smileys/smiley5.svg'\n\n// Create an array for images\n// Each index coinciding with image number\n// If value is not being used (i.e. smiley0), leave an empty string\nexport const smileys = ['', smiley1, smiley2, smiley3, smiley4, smiley5]\n","import React from 'react'\n\nimport './HappySlider.css'\nimport { smileys } from './smileyArray'\n\nexport const HappySlider = ({ id, value, min, max, name, onChange, className, step }) => {\n\n    // Round the value of the slider\n    // Unecessary if 'step' is set to an integer\n    const rounded = Math.round(value)\n\n    // Set the CSS variable from the 'id' of the input\n    // and the rounded value of the slider\n    document.documentElement.style.setProperty(`--background-image-${id}`, `url(${smileys[rounded]})`)\n\n    return (\n      <div className=\"slidecontainer\">\n        <input\n          type=\"range\"\n          id={id}\n          onChange={onChange}\n          min={min}\n          max={max}\n          name={name}\n          value={value}\n          className={className}\n          step={step}\n        />\n      </div>\n    )\n  }\n\n\nexport default HappySlider\n","import React from 'react';\n\nimport './App.scss';\n\nimport HappySlider from './HappySlider/HappySlider'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n      this.state = {\n        sliderOne: 3,\n        sliderTwo: 3\n      }\n  }\n\n  handleChange = (event) => {\n      this.setState({ [event.target.name]: event.target.value })\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <HappySlider\n          type=\"range\"\n          onChange={this.handleChange}\n          min='1'\n          max='5'\n          value={this.state.sliderOne}\n          name=\"sliderOne\"\n          className='sliderOne'\n          id=\"sliderOne\"\n          step='0.01'\n        />\n        <HappySlider\n          type=\"range\"\n          onChange={this.handleChange}\n          min='1'\n          max='5'\n          value={this.state.sliderTwo}\n          name='sliderTwo'\n          className='sliderTwo'\n          id=\"sliderTwo\"\n          step='0.01'\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}